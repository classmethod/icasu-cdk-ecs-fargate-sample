// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`dev snapshot test 1`] = `
{
  "Outputs": {
    "BASTIONEC2INSTANCEID": {
      "Value": {
        "Ref": "MyTestStackauroraMyTestStackaurorabastionhost7610EECD",
      },
    },
    "CLIENTID": {
      "Value": {
        "Ref": "MyTestStackcognitoMyTestStackcognitoUserPoolMyTestStackcognitoUserPoolClient06869A2A",
      },
    },
    "LOADBALANCERDNSNAME": {
      "Value": {
        "Fn::GetAtt": [
          "MyTestStackecsMyTestStackecsAlbB20205D6",
          "DNSName",
        ],
      },
    },
    "MYSQLENDPOINT": {
      "Value": {
        "Fn::GetAtt": [
          "MyTestStackauroraMyTestStackauroraauroraDEE0F7D2",
          "Endpoint.Address",
        ],
      },
    },
    "MyTestStackauroraMyTestStackaurorabastionhostBastionHostId842770EB": {
      "Description": "Instance ID of the bastion host. Use this to connect via SSM Session Manager",
      "Value": {
        "Ref": "MyTestStackauroraMyTestStackaurorabastionhost7610EECD",
      },
    },
    "USERPOOLID": {
      "Value": {
        "Ref": "MyTestStackcognitoMyTestStackcognitoUserPool513A0898",
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "SsmParameterValueawsserviceamiamazonlinuxlatestal2023amikernel61arm64C96584B6F00A464EAD1953AFF4B05118Parameter": {
      "Default": "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-arm64",
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
    },
  },
  "Resources": {
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A": {
      "DependsOn": [
        "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
        "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": "cdk-hnb659fds-assets-123456789012-ap-northeast-1",
          "S3Key": "4e26bf2d0a26f2097fb2b261f22bb51e3f6b4b52635777b1e54edbd8e2d58c35.zip",
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:PutRetentionPolicy",
                "logs:DeleteRetentionPolicy",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
        "Roles": [
          {
            "Ref": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "MyTestStackauroraMyTestStackauroraauroraDEE0F7D2": {
      "DeletionPolicy": "Snapshot",
      "Properties": {
        "BackupRetentionPeriod": 7,
        "CopyTagsToSnapshot": true,
        "DBClusterParameterGroupName": {
          "Ref": "MyTestStackauroraMyTestStackauroraauroraparametersgroup241B9329",
        },
        "DBSubnetGroupName": {
          "Ref": "MyTestStackauroraMyTestStackauroraauroraSubnetsE93C8EDC",
        },
        "DatabaseName": "icasudb",
        "EnableCloudwatchLogsExports": [
          "audit",
          "error",
          "general",
          "slowquery",
        ],
        "Engine": "aurora-mysql",
        "EngineVersion": "8.0.mysql_aurora.3.04.0",
        "MasterUserPassword": {
          "Fn::Join": [
            "",
            [
              "{{resolve:secretsmanager:",
              {
                "Ref": "MyTestStackauroraMyTestStackauroraaurorasecret64B8E37F",
              },
              ":SecretString:password::}}",
            ],
          ],
        },
        "MasterUsername": {
          "Fn::Join": [
            "",
            [
              "{{resolve:secretsmanager:",
              {
                "Ref": "MyTestStackauroraMyTestStackauroraaurorasecret64B8E37F",
              },
              ":SecretString:username::}}",
            ],
          ],
        },
        "PreferredBackupWindow": "15:00-15:30",
        "PreferredMaintenanceWindow": "Sat:17:00-Sat:17:30",
        "ServerlessV2ScalingConfiguration": {
          "MaxCapacity": 2,
          "MinCapacity": 0.5,
        },
        "StorageEncrypted": true,
        "VpcSecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "MyTestStackauroraMyTestStackauroraauroraSecurityGroupAC1134F2",
              "GroupId",
            ],
          },
        ],
      },
      "Type": "AWS::RDS::DBCluster",
      "UpdateReplacePolicy": "Snapshot",
    },
    "MyTestStackauroraMyTestStackauroraauroraLogRetentionauditBE536A00": {
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/rds/cluster/",
              {
                "Ref": "MyTestStackauroraMyTestStackauroraauroraDEE0F7D2",
              },
              "/audit",
            ],
          ],
        },
        "RetentionInDays": 365,
        "ServiceToken": {
          "Fn::GetAtt": [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
            "Arn",
          ],
        },
      },
      "Type": "Custom::LogRetention",
    },
    "MyTestStackauroraMyTestStackauroraauroraLogRetentionerror7EFEC4D6": {
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/rds/cluster/",
              {
                "Ref": "MyTestStackauroraMyTestStackauroraauroraDEE0F7D2",
              },
              "/error",
            ],
          ],
        },
        "RetentionInDays": 365,
        "ServiceToken": {
          "Fn::GetAtt": [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
            "Arn",
          ],
        },
      },
      "Type": "Custom::LogRetention",
    },
    "MyTestStackauroraMyTestStackauroraauroraLogRetentiongeneral8E5729AC": {
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/rds/cluster/",
              {
                "Ref": "MyTestStackauroraMyTestStackauroraauroraDEE0F7D2",
              },
              "/general",
            ],
          ],
        },
        "RetentionInDays": 365,
        "ServiceToken": {
          "Fn::GetAtt": [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
            "Arn",
          ],
        },
      },
      "Type": "Custom::LogRetention",
    },
    "MyTestStackauroraMyTestStackauroraauroraLogRetentionslowquery31FA9BF8": {
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/rds/cluster/",
              {
                "Ref": "MyTestStackauroraMyTestStackauroraauroraDEE0F7D2",
              },
              "/slowquery",
            ],
          ],
        },
        "RetentionInDays": 365,
        "ServiceToken": {
          "Fn::GetAtt": [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
            "Arn",
          ],
        },
      },
      "Type": "Custom::LogRetention",
    },
    "MyTestStackauroraMyTestStackauroraauroraMyTestStackauroraaurorawriter855DB745": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "MyTestStackvpcMyTestStackvpcVpcProtectedSubnet1DefaultRoute6740A711",
        "MyTestStackvpcMyTestStackvpcVpcProtectedSubnet1RouteTableAssociation50FC14B6",
        "MyTestStackvpcMyTestStackvpcVpcProtectedSubnet2DefaultRouteDD2335A4",
        "MyTestStackvpcMyTestStackvpcVpcProtectedSubnet2RouteTableAssociation805EFE25",
      ],
      "Properties": {
        "CACertificateIdentifier": "rds-ca-rsa4096-g1",
        "DBClusterIdentifier": {
          "Ref": "MyTestStackauroraMyTestStackauroraauroraDEE0F7D2",
        },
        "DBInstanceClass": "db.serverless",
        "Engine": "aurora-mysql",
        "PromotionTier": 0,
        "PubliclyAccessible": false,
      },
      "Type": "AWS::RDS::DBInstance",
      "UpdateReplacePolicy": "Delete",
    },
    "MyTestStackauroraMyTestStackauroraauroraSecurityGroupAC1134F2": {
      "Properties": {
        "GroupDescription": "RDS security group",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpc97FA3F3C",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "MyTestStackauroraMyTestStackauroraauroraSecurityGroupfromMyTestStackMyTestStackauroraMyTestStackaurorabastionec2foraurora89D7C9B93306DE3B0347": {
      "Properties": {
        "Description": "from MyTestStackMyTestStackauroraMyTestStackaurorabastionec2foraurora89D7C9B9:3306",
        "FromPort": 3306,
        "GroupId": {
          "Fn::GetAtt": [
            "MyTestStackauroraMyTestStackauroraauroraSecurityGroupAC1134F2",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "MyTestStackauroraMyTestStackaurorabastionec2foraurora370C2A36",
            "GroupId",
          ],
        },
        "ToPort": 3306,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "MyTestStackauroraMyTestStackauroraauroraSecurityGroupfromMyTestStackMyTestStacksgMyTestStacksgSgFargateC548CFBE3306E4B72264": {
      "Properties": {
        "Description": "from MyTestStackMyTestStacksgMyTestStacksgSgFargateC548CFBE:3306",
        "FromPort": 3306,
        "GroupId": {
          "Fn::GetAtt": [
            "MyTestStackauroraMyTestStackauroraauroraSecurityGroupAC1134F2",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "MyTestStacksgMyTestStacksgSgFargateD6A16DFB",
            "GroupId",
          ],
        },
        "ToPort": 3306,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "MyTestStackauroraMyTestStackauroraauroraSubnetsE93C8EDC": {
      "Properties": {
        "DBSubnetGroupDescription": "Subnets for MyTestStack-aurora-aurora database",
        "SubnetIds": [
          {
            "Ref": "MyTestStackvpcMyTestStackvpcVpcProtectedSubnet1SubnetFF3E56DC",
          },
          {
            "Ref": "MyTestStackvpcMyTestStackvpcVpcProtectedSubnet2Subnet373DC948",
          },
        ],
      },
      "Type": "AWS::RDS::DBSubnetGroup",
    },
    "MyTestStackauroraMyTestStackauroraauroraparametersgroup241B9329": {
      "Properties": {
        "Description": "Cluster parameter group for aurora-mysql8.0",
        "Family": "aurora-mysql8.0",
        "Parameters": {
          "autocommit": "1",
          "character_set_client": "utf8mb4",
          "character_set_server": "utf8mb4",
          "general_log": "1",
          "long_query_time": "2",
          "server_audit_events": "CONNECT,QUERY,TABLE",
          "server_audit_logging": "1",
          "slow_query_log": "1",
          "sql_mode": "TRADITIONAL,NO_AUTO_VALUE_ON_ZERO,ONLY_FULL_GROUP_BY",
          "transaction_isolation": "READ-COMMITTED",
        },
      },
      "Type": "AWS::RDS::DBClusterParameterGroup",
    },
    "MyTestStackauroraMyTestStackauroraaurorasecret64B8E37F": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "GenerateSecretString": {
          "ExcludePunctuation": true,
          "GenerateStringKey": "password",
          "IncludeSpace": false,
          "SecretStringTemplate": "{"username":"icasu"}",
        },
        "Name": "aurora-root-secret",
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "MyTestStackauroraMyTestStackauroraaurorasecretAttachment242CB4E2": {
      "Properties": {
        "SecretId": {
          "Ref": "MyTestStackauroraMyTestStackauroraaurorasecret64B8E37F",
        },
        "TargetId": {
          "Ref": "MyTestStackauroraMyTestStackauroraauroraDEE0F7D2",
        },
        "TargetType": "AWS::RDS::DBCluster",
      },
      "Type": "AWS::SecretsManager::SecretTargetAttachment",
    },
    "MyTestStackauroraMyTestStackauroraaurorasecuritygroupFD2DF400": {
      "Properties": {
        "GroupDescription": "MyTestStack/MyTestStack-aurora/MyTestStack-aurora-aurora-security-group",
        "SecurityGroupEgress": [
          {
            "CidrIp": "127.0.0.1/32",
            "Description": "from 127.0.0.1/32:ALL PORTS",
            "FromPort": 0,
            "IpProtocol": "tcp",
            "ToPort": 65535,
          },
        ],
        "VpcId": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpc97FA3F3C",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "MyTestStackauroraMyTestStackauroraaurorasecuritygroupfromMyTestStackMyTestStacksgMyTestStacksgSgFargateC548CFBE3306784CBB73": {
      "Properties": {
        "Description": "from MyTestStackMyTestStacksgMyTestStacksgSgFargateC548CFBE:3306",
        "FromPort": 3306,
        "GroupId": {
          "Fn::GetAtt": [
            "MyTestStackauroraMyTestStackauroraaurorasecuritygroupFD2DF400",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "MyTestStacksgMyTestStacksgSgFargateD6A16DFB",
            "GroupId",
          ],
        },
        "ToPort": 3306,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "MyTestStackauroraMyTestStackaurorabastionec2foraurora370C2A36": {
      "Properties": {
        "GroupDescription": "MyTestStack/MyTestStack-aurora/MyTestStack-aurora-bastion-ec2-for-aurora",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpc97FA3F3C",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "MyTestStackauroraMyTestStackaurorabastionhost7610EECD": {
      "DependsOn": [
        "MyTestStackauroraMyTestStackaurorabastionhostInstanceRoleDefaultPolicy675C8E3F",
        "MyTestStackauroraMyTestStackaurorabastionhostInstanceRole1B86F894",
      ],
      "Properties": {
        "AvailabilityZone": "dummy1a",
        "IamInstanceProfile": {
          "Ref": "MyTestStackauroraMyTestStackaurorabastionhostInstanceProfile4475F590",
        },
        "ImageId": "ami-0dafcef159a1fc745",
        "InstanceType": "t3.nano",
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "MyTestStackauroraMyTestStackaurorabastionec2foraurora370C2A36",
              "GroupId",
            ],
          },
        ],
        "SubnetId": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpcProtectedSubnet1SubnetFF3E56DC",
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "BastionHost",
          },
        ],
        "UserData": {
          "Fn::Base64": "#!/bin/bash",
        },
      },
      "Type": "AWS::EC2::Instance",
    },
    "MyTestStackauroraMyTestStackaurorabastionhostInstanceProfile4475F590": {
      "Properties": {
        "Roles": [
          {
            "Ref": "MyTestStackauroraMyTestStackaurorabastionhostInstanceRole1B86F894",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "MyTestStackauroraMyTestStackaurorabastionhostInstanceRole1B86F894": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "BastionHost",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "MyTestStackauroraMyTestStackaurorabastionhostInstanceRoleDefaultPolicy675C8E3F": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ssmmessages:*",
                "ssm:UpdateInstanceInformation",
                "ec2messages:*",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "MyTestStackauroraMyTestStackaurorabastionhostInstanceRoleDefaultPolicy675C8E3F",
        "Roles": [
          {
            "Ref": "MyTestStackauroraMyTestStackaurorabastionhostInstanceRole1B86F894",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "MyTestStackcognitoMyTestStackcognitoUserPool513A0898": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "AccountRecoverySetting": {
          "RecoveryMechanisms": [
            {
              "Name": "verified_phone_number",
              "Priority": 1,
            },
            {
              "Name": "verified_email",
              "Priority": 2,
            },
          ],
        },
        "AdminCreateUserConfig": {
          "AllowAdminCreateUserOnly": true,
        },
        "AutoVerifiedAttributes": [
          "email",
        ],
        "DeletionProtection": "ACTIVE",
        "EmailVerificationMessage": "The verification code to your new account is {####}",
        "EmailVerificationSubject": "Verify your new account",
        "EnabledMfas": [
          "SMS_MFA",
        ],
        "MfaConfiguration": "OPTIONAL",
        "SmsConfiguration": {
          "ExternalId": "MyTestStackMyTestStackcognitoMyTestStackcognitoUserPool8E064955",
          "SnsCallerArn": {
            "Fn::GetAtt": [
              "MyTestStackcognitoMyTestStackcognitoUserPoolsmsRole92106417",
              "Arn",
            ],
          },
        },
        "SmsVerificationMessage": "The verification code to your new account is {####}",
        "UserPoolName": "icasu-ecs-fargate",
        "UsernameAttributes": [
          "email",
        ],
        "VerificationMessageTemplate": {
          "DefaultEmailOption": "CONFIRM_WITH_CODE",
          "EmailMessage": "The verification code to your new account is {####}",
          "EmailSubject": "Verify your new account",
          "SmsMessage": "The verification code to your new account is {####}",
        },
      },
      "Type": "AWS::Cognito::UserPool",
      "UpdateReplacePolicy": "Retain",
    },
    "MyTestStackcognitoMyTestStackcognitoUserPoolMyTestStackcognitoUserPoolClient06869A2A": {
      "Properties": {
        "AllowedOAuthFlows": [
          "code",
        ],
        "AllowedOAuthFlowsUserPoolClient": true,
        "AllowedOAuthScopes": [
          "email",
          "profile",
          "openid",
        ],
        "CallbackURLs": [
          "https://classmethod.jp/",
        ],
        "ClientName": "icasu-ecs-fargate",
        "ExplicitAuthFlows": [
          "ALLOW_ADMIN_USER_PASSWORD_AUTH",
          "ALLOW_REFRESH_TOKEN_AUTH",
        ],
        "GenerateSecret": false,
        "LogoutURLs": [
          "https://classmethod.jp/",
        ],
        "SupportedIdentityProviders": [
          "COGNITO",
        ],
        "UserPoolId": {
          "Ref": "MyTestStackcognitoMyTestStackcognitoUserPool513A0898",
        },
      },
      "Type": "AWS::Cognito::UserPoolClient",
    },
    "MyTestStackcognitoMyTestStackcognitoUserPoolMyTestStackcognitoUserPoolClientForE2ETestAEA24D83": {
      "Properties": {
        "AllowedOAuthFlows": [
          "code",
        ],
        "AllowedOAuthFlowsUserPoolClient": true,
        "AllowedOAuthScopes": [
          "email",
          "profile",
          "openid",
        ],
        "CallbackURLs": [
          "https://classmethod.jp/",
        ],
        "ClientName": "icasu-ecs-fargateE2EClient",
        "ExplicitAuthFlows": [
          "ALLOW_ADMIN_USER_PASSWORD_AUTH",
          "ALLOW_REFRESH_TOKEN_AUTH",
        ],
        "GenerateSecret": false,
        "LogoutURLs": [
          "https://classmethod.jp/",
        ],
        "SupportedIdentityProviders": [
          "COGNITO",
        ],
        "UserPoolId": {
          "Ref": "MyTestStackcognitoMyTestStackcognitoUserPool513A0898",
        },
      },
      "Type": "AWS::Cognito::UserPoolClient",
    },
    "MyTestStackcognitoMyTestStackcognitoUserPoolMyTestStackcognitoUserPoolDomain1DD88321": {
      "Properties": {
        "Domain": "icasu-ecs-fargate-sample-app",
        "UserPoolId": {
          "Ref": "MyTestStackcognitoMyTestStackcognitoUserPool513A0898",
        },
      },
      "Type": "AWS::Cognito::UserPoolDomain",
    },
    "MyTestStackcognitoMyTestStackcognitoUserPoolsmsRole92106417": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Condition": {
                "StringEquals": {
                  "sts:ExternalId": "MyTestStackMyTestStackcognitoMyTestStackcognitoUserPool8E064955",
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "cognito-idp.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "sns:Publish",
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "sns-publish",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "MyTestStackecsMyTestStackecsAlbB20205D6": {
      "DependsOn": [
        "MyTestStackecsMyTestStackecsAlbLogBucketPolicyE0206913",
        "MyTestStackvpcMyTestStackvpcVpcPublicSubnet1DefaultRoute23A6B185",
        "MyTestStackvpcMyTestStackvpcVpcPublicSubnet1RouteTableAssociation59B1FDA3",
        "MyTestStackvpcMyTestStackvpcVpcPublicSubnet2DefaultRoute1307EFF4",
        "MyTestStackvpcMyTestStackvpcVpcPublicSubnet2RouteTableAssociationBBFDF469",
      ],
      "Properties": {
        "LoadBalancerAttributes": [
          {
            "Key": "deletion_protection.enabled",
            "Value": "false",
          },
          {
            "Key": "access_logs.s3.enabled",
            "Value": "true",
          },
          {
            "Key": "access_logs.s3.bucket",
            "Value": {
              "Ref": "MyTestStackecsMyTestStackecsAlbLogBucket7C06DB5E",
            },
          },
          {
            "Key": "access_logs.s3.prefix",
            "Value": "",
          },
        ],
        "Scheme": "internet-facing",
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "MyTestStackecsMyTestStackecsAlbSecurityGroup9B5A1647",
              "GroupId",
            ],
          },
        ],
        "Subnets": [
          {
            "Ref": "MyTestStackvpcMyTestStackvpcVpcPublicSubnet1Subnet6C9B5DA0",
          },
          {
            "Ref": "MyTestStackvpcMyTestStackvpcVpcPublicSubnet2Subnet8EE113CC",
          },
        ],
        "Type": "application",
      },
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
    },
    "MyTestStackecsMyTestStackecsAlbLogBucket7C06DB5E": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "AccessControl": "Private",
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "MyTestStackecsMyTestStackecsAlbLogBucketPolicyE0206913": {
      "Properties": {
        "Bucket": {
          "Ref": "MyTestStackecsMyTestStackecsAlbLogBucket7C06DB5E",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:PutObject",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::582318560864:root",
                    ],
                  ],
                },
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "MyTestStackecsMyTestStackecsAlbLogBucket7C06DB5E",
                        "Arn",
                      ],
                    },
                    "/AWSLogs/123456789012/*",
                  ],
                ],
              },
            },
            {
              "Action": "s3:PutObject",
              "Condition": {
                "StringEquals": {
                  "s3:x-amz-acl": "bucket-owner-full-control",
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "delivery.logs.amazonaws.com",
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "MyTestStackecsMyTestStackecsAlbLogBucket7C06DB5E",
                        "Arn",
                      ],
                    },
                    "/AWSLogs/123456789012/*",
                  ],
                ],
              },
            },
            {
              "Action": "s3:GetBucketAcl",
              "Effect": "Allow",
              "Principal": {
                "Service": "delivery.logs.amazonaws.com",
              },
              "Resource": {
                "Fn::GetAtt": [
                  "MyTestStackecsMyTestStackecsAlbLogBucket7C06DB5E",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "MyTestStackecsMyTestStackecsAlbMyTestStackecsAlbListener78F8BCC6": {
      "Properties": {
        "DefaultActions": [
          {
            "TargetGroupArn": {
              "Ref": "MyTestStackecsMyTestStackecsAlbMyTestStackecsAlbListenerMyTestStackecsFromAppTargetGroupGroup6451376D",
            },
            "Type": "forward",
          },
        ],
        "LoadBalancerArn": {
          "Ref": "MyTestStackecsMyTestStackecsAlbB20205D6",
        },
        "Port": 80,
        "Protocol": "HTTP",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "MyTestStackecsMyTestStackecsAlbMyTestStackecsAlbListenerMyTestStackecsFromAppTargetGroupGroup6451376D": {
      "Properties": {
        "HealthCheckEnabled": true,
        "HealthCheckPath": "/health-check",
        "Matcher": {
          "HttpCode": "204",
        },
        "Port": 80,
        "Protocol": "HTTP",
        "TargetGroupAttributes": [
          {
            "Key": "stickiness.enabled",
            "Value": "false",
          },
          {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "30",
          },
          {
            "Key": "load_balancing.algorithm.type",
            "Value": "least_outstanding_requests",
          },
        ],
        "TargetType": "ip",
        "VpcId": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpc97FA3F3C",
        },
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
    "MyTestStackecsMyTestStackecsAlbSecurityGroup9B5A1647": {
      "Properties": {
        "GroupDescription": "Automatically created Security Group for ELB MyTestStackMyTestStackecsMyTestStackecsAlbABAC8C7F",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow from anyone on port 80",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80,
          },
        ],
        "VpcId": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpc97FA3F3C",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "MyTestStackecsMyTestStackecsAlbSecurityGrouptoMyTestStackMyTestStacksgMyTestStacksgSgFargateC548CFBE801A760B9C": {
      "Properties": {
        "Description": "Load balancer to target",
        "DestinationSecurityGroupId": {
          "Fn::GetAtt": [
            "MyTestStacksgMyTestStacksgSgFargateD6A16DFB",
            "GroupId",
          ],
        },
        "FromPort": 80,
        "GroupId": {
          "Fn::GetAtt": [
            "MyTestStackecsMyTestStackecsAlbSecurityGroup9B5A1647",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "ToPort": 80,
      },
      "Type": "AWS::EC2::SecurityGroupEgress",
    },
    "MyTestStackecsMyTestStackecsClusterFA315040": {
      "Properties": {
        "ClusterSettings": [
          {
            "Name": "containerInsights",
            "Value": "enabled",
          },
        ],
      },
      "Type": "AWS::ECS::Cluster",
    },
    "MyTestStackecsMyTestStackecsEcsServiceTaskRole137ED4C9": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSSMFullAccess",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "MyTestStackecsMyTestStackecsEcsServiceTaskRoleDefaultPolicyC40098D9": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ssmmessages:CreateControlChannel",
                "ssmmessages:CreateDataChannel",
                "ssmmessages:OpenControlChannel",
                "ssmmessages:OpenDataChannel",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "logs:DescribeLogGroups",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "MyTestStackecsMyTestStackecsEcsServiceTaskRoleDefaultPolicyC40098D9",
        "Roles": [
          {
            "Ref": "MyTestStackecsMyTestStackecsEcsServiceTaskRole137ED4C9",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "MyTestStackecsMyTestStackecsEcsTaskExecutionRoleAE354245": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "MyTestStackecsMyTestStackecsEcsTaskExecutionRoleDefaultPolicy60E37C92": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecr:ap-northeast-1:123456789012:repository/icasu-ecs-fargate-sample-app",
                  ],
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "MyTestStackecsMyTestStackecsServiceLogGroup2002BE63",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "MyTestStackauroraMyTestStackauroraaurorasecret64B8E37F",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "MyTestStackecsMyTestStackecsEcsTaskExecutionRoleDefaultPolicy60E37C92",
        "Roles": [
          {
            "Ref": "MyTestStackecsMyTestStackecsEcsTaskExecutionRoleAE354245",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "MyTestStackecsMyTestStackecsFargateService55127E9D": {
      "DependsOn": [
        "MyTestStackecsMyTestStackecsAlbMyTestStackecsAlbListenerMyTestStackecsFromAppTargetGroupGroup6451376D",
        "MyTestStackecsMyTestStackecsAlbMyTestStackecsAlbListener78F8BCC6",
        "MyTestStackecsMyTestStackecsEcsServiceTaskRoleDefaultPolicyC40098D9",
        "MyTestStackecsMyTestStackecsEcsServiceTaskRole137ED4C9",
      ],
      "Properties": {
        "Cluster": {
          "Ref": "MyTestStackecsMyTestStackecsClusterFA315040",
        },
        "DeploymentConfiguration": {
          "Alarms": {
            "AlarmNames": [],
            "Enable": false,
            "Rollback": false,
          },
          "DeploymentCircuitBreaker": {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DeploymentController": {
          "Type": "ECS",
        },
        "DesiredCount": 1,
        "EnableECSManagedTags": false,
        "EnableExecuteCommand": true,
        "HealthCheckGracePeriodSeconds": 60,
        "LaunchType": "FARGATE",
        "LoadBalancers": [
          {
            "ContainerName": "api",
            "ContainerPort": 80,
            "TargetGroupArn": {
              "Ref": "MyTestStackecsMyTestStackecsAlbMyTestStackecsAlbListenerMyTestStackecsFromAppTargetGroupGroup6451376D",
            },
          },
        ],
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": [
              {
                "Fn::GetAtt": [
                  "MyTestStacksgMyTestStacksgSgFargateD6A16DFB",
                  "GroupId",
                ],
              },
            ],
            "Subnets": [
              {
                "Ref": "MyTestStackvpcMyTestStackvpcVpcProtectedSubnet1SubnetFF3E56DC",
              },
              {
                "Ref": "MyTestStackvpcMyTestStackvpcVpcProtectedSubnet2Subnet373DC948",
              },
            ],
          },
        },
        "TaskDefinition": {
          "Ref": "MyTestStackecsMyTestStackecsServiceTaskDefinition886EA725",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "MyTestStackecsMyTestStackecsServiceLogGroup2002BE63": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 90,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "MyTestStackecsMyTestStackecsServiceTaskDefinition886EA725": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Environment": [
              {
                "Name": "COGNITO_USERPOOL_ID",
                "Value": {
                  "Ref": "MyTestStackcognitoMyTestStackcognitoUserPool513A0898",
                },
              },
              {
                "Name": "COGNITO_CLIENT_ID",
                "Value": {
                  "Ref": "MyTestStackcognitoMyTestStackcognitoUserPoolMyTestStackcognitoUserPoolClient06869A2A",
                },
              },
            ],
            "Essential": true,
            "Image": {
              "Fn::Join": [
                "",
                [
                  "123456789012.dkr.ecr.ap-northeast-1.",
                  {
                    "Ref": "AWS::URLSuffix",
                  },
                  "/icasu-ecs-fargate-sample-app:DUMMY",
                ],
              ],
            },
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "MyTestStackecsMyTestStackecsServiceLogGroup2002BE63",
                },
                "awslogs-region": "ap-northeast-1",
                "awslogs-stream-prefix": "samplePrefixName",
              },
            },
            "Name": "api",
            "PortMappings": [
              {
                "ContainerPort": 80,
                "HostPort": 80,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "MyTestStackauroraMyTestStackauroraaurorasecret64B8E37F",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_DBNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "MyTestStackauroraMyTestStackauroraaurorasecret64B8E37F",
                      },
                      ":dbname::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "MyTestStackauroraMyTestStackauroraaurorasecret64B8E37F",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "MyTestStackauroraMyTestStackauroraaurorasecret64B8E37F",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "MyTestStackecsMyTestStackecsEcsTaskExecutionRoleAE354245",
            "Arn",
          ],
        },
        "Family": "MyTestStackMyTestStackecsMyTestStackecsServiceTaskDefinitionE68A9723",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "MyTestStackecsMyTestStackecsEcsServiceTaskRole137ED4C9",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "MyTestStackecsMyTestStackecsWebAclAssociation2DE0B365": {
      "Properties": {
        "ResourceArn": {
          "Ref": "MyTestStackecsMyTestStackecsAlbB20205D6",
        },
        "WebACLArn": {
          "Fn::GetAtt": [
            "MyTestStackwafMyTestStackwafWebAclB683AB5B",
            "Arn",
          ],
        },
      },
      "Type": "AWS::WAFv2::WebACLAssociation",
    },
    "MyTestStacksgMyTestStacksgSgAlbC6EB6995": {
      "Properties": {
        "GroupDescription": "MyTestStack/MyTestStack-sg/MyTestStack-sg-SgAlb",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "from 0.0.0.0/0:ALL PORTS",
            "FromPort": 0,
            "IpProtocol": "tcp",
            "ToPort": 65535,
          },
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "from 0.0.0.0/0:80",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80,
          },
        ],
        "VpcId": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpc97FA3F3C",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "MyTestStacksgMyTestStacksgSgFargateD6A16DFB": {
      "Properties": {
        "GroupDescription": "MyTestStack/MyTestStack-sg/MyTestStack-sg-SgFargate",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "from 0.0.0.0/0:ALL PORTS",
            "FromPort": 0,
            "IpProtocol": "tcp",
            "ToPort": 65535,
          },
        ],
        "VpcId": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpc97FA3F3C",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "MyTestStacksgMyTestStacksgSgFargatefromMyTestStackMyTestStackecsMyTestStackecsAlbSecurityGroupECA9244E800126D76C": {
      "Properties": {
        "Description": "Load balancer to target",
        "FromPort": 80,
        "GroupId": {
          "Fn::GetAtt": [
            "MyTestStacksgMyTestStacksgSgFargateD6A16DFB",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "MyTestStackecsMyTestStackecsAlbSecurityGroup9B5A1647",
            "GroupId",
          ],
        },
        "ToPort": 80,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "MyTestStacksgMyTestStacksgSgFargatefromMyTestStackMyTestStacksgMyTestStacksgSgAlbDD28418F80BF66281F": {
      "Properties": {
        "Description": "from MyTestStackMyTestStacksgMyTestStacksgSgAlbDD28418F:80",
        "FromPort": 80,
        "GroupId": {
          "Fn::GetAtt": [
            "MyTestStacksgMyTestStacksgSgFargateD6A16DFB",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "MyTestStacksgMyTestStacksgSgAlbC6EB6995",
            "GroupId",
          ],
        },
        "ToPort": 80,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "MyTestStacksgMyTestStacksgSgFargatetoMyTestStackMyTestStackauroraMyTestStackauroraauroraSecurityGroup42E9ABD7330640DDB43A": {
      "Properties": {
        "Description": "to MyTestStackMyTestStackauroraMyTestStackauroraauroraSecurityGroup42E9ABD7:3306",
        "DestinationSecurityGroupId": {
          "Fn::GetAtt": [
            "MyTestStackauroraMyTestStackauroraauroraSecurityGroupAC1134F2",
            "GroupId",
          ],
        },
        "FromPort": 3306,
        "GroupId": {
          "Fn::GetAtt": [
            "MyTestStacksgMyTestStacksgSgFargateD6A16DFB",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "ToPort": 3306,
      },
      "Type": "AWS::EC2::SecurityGroupEgress",
    },
    "MyTestStackvpcMyTestStackvpcVpc97FA3F3C": {
      "Properties": {
        "CidrBlock": "10.100.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyTestStack/MyTestStack-vpc/MyTestStack-vpc-Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "MyTestStackvpcMyTestStackvpcVpcFlowLogBucket3B805823": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "AccessControl": "Private",
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "MyTestStackvpcMyTestStackvpcVpcIGWE5DEF7CD": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyTestStack/MyTestStack-vpc/MyTestStack-vpc-Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "MyTestStackvpcMyTestStackvpcVpcIdSsmParam7CC63486": {
      "Properties": {
        "Description": "This param is the VPC ID of the XXX system",
        "Name": "/XXX/VpcId",
        "Tier": "Standard",
        "Type": "String",
        "Value": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpc97FA3F3C",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "MyTestStackvpcMyTestStackvpcVpcMyTestStackvpcFlowLogsFlowLogC9AC288D": {
      "Properties": {
        "LogDestination": {
          "Fn::GetAtt": [
            "MyTestStackvpcMyTestStackvpcVpcFlowLogBucket3B805823",
            "Arn",
          ],
        },
        "LogDestinationType": "s3",
        "ResourceId": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpc97FA3F3C",
        },
        "ResourceType": "VPC",
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyTestStack/MyTestStack-vpc/MyTestStack-vpc-Vpc/MyTestStack-vpc-FlowLogs",
          },
        ],
        "TrafficType": "ALL",
      },
      "Type": "AWS::EC2::FlowLog",
    },
    "MyTestStackvpcMyTestStackvpcVpcMyTestStackvpcS3EndpointForPrivateD740B7DA": {
      "Properties": {
        "RouteTableIds": [
          {
            "Ref": "MyTestStackvpcMyTestStackvpcVpcProtectedSubnet1RouteTable75DB2B92",
          },
          {
            "Ref": "MyTestStackvpcMyTestStackvpcVpcProtectedSubnet2RouteTable3D29FCE1",
          },
        ],
        "ServiceName": {
          "Fn::Join": [
            "",
            [
              "com.amazonaws.",
              {
                "Ref": "AWS::Region",
              },
              ".s3",
            ],
          ],
        },
        "VpcEndpointType": "Gateway",
        "VpcId": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpc97FA3F3C",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "MyTestStackvpcMyTestStackvpcVpcNatSecurityGroupF0C929B7": {
      "Properties": {
        "GroupDescription": "Security Group for NAT instances",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": {
              "Fn::GetAtt": [
                "MyTestStackvpcMyTestStackvpcVpc97FA3F3C",
                "CidrBlock",
              ],
            },
            "Description": {
              "Fn::Join": [
                "",
                [
                  "from ",
                  {
                    "Fn::GetAtt": [
                      "MyTestStackvpcMyTestStackvpcVpc97FA3F3C",
                      "CidrBlock",
                    ],
                  },
                  ":ALL TRAFFIC",
                ],
              ],
            },
            "IpProtocol": "-1",
          },
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyTestStack/MyTestStack-vpc/MyTestStack-vpc-Vpc",
          },
        ],
        "VpcId": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpc97FA3F3C",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "MyTestStackvpcMyTestStackvpcVpcProtectedSubnet1DefaultRoute6740A711": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpcPublicSubnet1NatInstanceA948DB8E",
        },
        "RouteTableId": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpcProtectedSubnet1RouteTable75DB2B92",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "MyTestStackvpcMyTestStackvpcVpcProtectedSubnet1RouteTable75DB2B92": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyTestStack/MyTestStack-vpc/MyTestStack-vpc-Vpc/ProtectedSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpc97FA3F3C",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "MyTestStackvpcMyTestStackvpcVpcProtectedSubnet1RouteTableAssociation50FC14B6": {
      "Properties": {
        "RouteTableId": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpcProtectedSubnet1RouteTable75DB2B92",
        },
        "SubnetId": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpcProtectedSubnet1SubnetFF3E56DC",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "MyTestStackvpcMyTestStackvpcVpcProtectedSubnet1SubnetFF3E56DC": {
      "Properties": {
        "AvailabilityZone": "dummy1a",
        "CidrBlock": "10.100.2.0/24",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Protected",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          {
            "Key": "Name",
            "Value": "MyTestStack/MyTestStack-vpc/MyTestStack-vpc-Vpc/ProtectedSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpc97FA3F3C",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "MyTestStackvpcMyTestStackvpcVpcProtectedSubnet2DefaultRouteDD2335A4": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpcPublicSubnet1NatInstanceA948DB8E",
        },
        "RouteTableId": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpcProtectedSubnet2RouteTable3D29FCE1",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "MyTestStackvpcMyTestStackvpcVpcProtectedSubnet2RouteTable3D29FCE1": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyTestStack/MyTestStack-vpc/MyTestStack-vpc-Vpc/ProtectedSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpc97FA3F3C",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "MyTestStackvpcMyTestStackvpcVpcProtectedSubnet2RouteTableAssociation805EFE25": {
      "Properties": {
        "RouteTableId": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpcProtectedSubnet2RouteTable3D29FCE1",
        },
        "SubnetId": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpcProtectedSubnet2Subnet373DC948",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "MyTestStackvpcMyTestStackvpcVpcProtectedSubnet2Subnet373DC948": {
      "Properties": {
        "AvailabilityZone": "dummy1b",
        "CidrBlock": "10.100.3.0/24",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Protected",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          {
            "Key": "Name",
            "Value": "MyTestStack/MyTestStack-vpc/MyTestStack-vpc-Vpc/ProtectedSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpc97FA3F3C",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "MyTestStackvpcMyTestStackvpcVpcPublicSubnet1DefaultRoute23A6B185": {
      "DependsOn": [
        "MyTestStackvpcMyTestStackvpcVpcVPCGW29298147",
      ],
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpcIGWE5DEF7CD",
        },
        "RouteTableId": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpcPublicSubnet1RouteTable3ADF48EF",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "MyTestStackvpcMyTestStackvpcVpcPublicSubnet1NatInstanceA948DB8E": {
      "DependsOn": [
        "MyTestStackvpcMyTestStackvpcVpcPublicSubnet1NatInstanceInstanceRole3C7FDBD6",
      ],
      "Properties": {
        "AvailabilityZone": "dummy1a",
        "IamInstanceProfile": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpcPublicSubnet1NatInstanceInstanceProfile7B4B329F",
        },
        "ImageId": {
          "Ref": "SsmParameterValueawsserviceamiamazonlinuxlatestal2023amikernel61arm64C96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "InstanceType": "t4g.nano",
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "MyTestStackvpcMyTestStackvpcVpcNatSecurityGroupF0C929B7",
              "GroupId",
            ],
          },
        ],
        "SourceDestCheck": false,
        "SubnetId": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpcPublicSubnet1Subnet6C9B5DA0",
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyTestStack/MyTestStack-vpc/MyTestStack-vpc-Vpc/PublicSubnet1/NatInstance",
          },
        ],
        "UserData": {
          "Fn::Base64": "#!/bin/bash
yum install iptables-services -y
systemctl enable iptables
systemctl start iptables
echo "net.ipv4.ip_forward=1" > /etc/sysctl.d/custom-ip-forwarding.conf
sudo sysctl -p /etc/sysctl.d/custom-ip-forwarding.conf
sudo /sbin/iptables -t nat -A POSTROUTING -o $(route | awk '/^default/{print $NF}') -j MASQUERADE
sudo /sbin/iptables -F FORWARD
sudo service iptables save",
        },
      },
      "Type": "AWS::EC2::Instance",
    },
    "MyTestStackvpcMyTestStackvpcVpcPublicSubnet1NatInstanceInstanceProfile7B4B329F": {
      "Properties": {
        "Roles": [
          {
            "Ref": "MyTestStackvpcMyTestStackvpcVpcPublicSubnet1NatInstanceInstanceRole3C7FDBD6",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "MyTestStackvpcMyTestStackvpcVpcPublicSubnet1NatInstanceInstanceRole3C7FDBD6": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyTestStack/MyTestStack-vpc/MyTestStack-vpc-Vpc/PublicSubnet1/NatInstance",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "MyTestStackvpcMyTestStackvpcVpcPublicSubnet1RouteTable3ADF48EF": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyTestStack/MyTestStack-vpc/MyTestStack-vpc-Vpc/PublicSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpc97FA3F3C",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "MyTestStackvpcMyTestStackvpcVpcPublicSubnet1RouteTableAssociation59B1FDA3": {
      "Properties": {
        "RouteTableId": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpcPublicSubnet1RouteTable3ADF48EF",
        },
        "SubnetId": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpcPublicSubnet1Subnet6C9B5DA0",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "MyTestStackvpcMyTestStackvpcVpcPublicSubnet1Subnet6C9B5DA0": {
      "Properties": {
        "AvailabilityZone": "dummy1a",
        "CidrBlock": "10.100.0.0/24",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          {
            "Key": "Name",
            "Value": "MyTestStack/MyTestStack-vpc/MyTestStack-vpc-Vpc/PublicSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpc97FA3F3C",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "MyTestStackvpcMyTestStackvpcVpcPublicSubnet2DefaultRoute1307EFF4": {
      "DependsOn": [
        "MyTestStackvpcMyTestStackvpcVpcVPCGW29298147",
      ],
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpcIGWE5DEF7CD",
        },
        "RouteTableId": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpcPublicSubnet2RouteTable77DE1EF0",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "MyTestStackvpcMyTestStackvpcVpcPublicSubnet2RouteTable77DE1EF0": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyTestStack/MyTestStack-vpc/MyTestStack-vpc-Vpc/PublicSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpc97FA3F3C",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "MyTestStackvpcMyTestStackvpcVpcPublicSubnet2RouteTableAssociationBBFDF469": {
      "Properties": {
        "RouteTableId": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpcPublicSubnet2RouteTable77DE1EF0",
        },
        "SubnetId": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpcPublicSubnet2Subnet8EE113CC",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "MyTestStackvpcMyTestStackvpcVpcPublicSubnet2Subnet8EE113CC": {
      "Properties": {
        "AvailabilityZone": "dummy1b",
        "CidrBlock": "10.100.1.0/24",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          {
            "Key": "Name",
            "Value": "MyTestStack/MyTestStack-vpc/MyTestStack-vpc-Vpc/PublicSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpc97FA3F3C",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "MyTestStackvpcMyTestStackvpcVpcVPCGW29298147": {
      "Properties": {
        "InternetGatewayId": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpcIGWE5DEF7CD",
        },
        "VpcId": {
          "Ref": "MyTestStackvpcMyTestStackvpcVpc97FA3F3C",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
    "MyTestStackwafMyTestStackwafWafLogGroup95D52AAA": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "LogGroupName": "aws-waf-logs-test",
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "MyTestStackwafMyTestStackwafWebAclB683AB5B": {
      "Properties": {
        "DefaultAction": {
          "Allow": {},
        },
        "Name": "WebAcl",
        "Rules": [
          {
            "Name": "AWSManagedRulesCommonRuleSet",
            "OverrideAction": {
              "Count": {},
            },
            "Priority": 1,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesCommonRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "AWS-AWSManagedRulesCommonRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
          {
            "Name": "AWSManagedRulesKnownBadInputsRuleSet",
            "OverrideAction": {
              "Count": {},
            },
            "Priority": 2,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesKnownBadInputsRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "AWS-AWSManagedRulesKnownBadInputsRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
          {
            "Name": "AWSManagedRulesAmazonIpReputationList",
            "OverrideAction": {
              "Count": {},
            },
            "Priority": 3,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesAmazonIpReputationList",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "AWS-AWSManagedRulesAmazonIpReputationList",
              "SampledRequestsEnabled": true,
            },
          },
          {
            "Name": "AWSManagedRulesLinuxRuleSet",
            "OverrideAction": {
              "Count": {},
            },
            "Priority": 4,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesLinuxRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "AWS-AWSManagedRulesLinuxRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
          {
            "Name": "AWSManagedRulesPHPRuleSet",
            "OverrideAction": {
              "Count": {},
            },
            "Priority": 5,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesPHPRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "AWS-AWSManagedRulesPHPRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
        ],
        "Scope": "REGIONAL",
        "VisibilityConfig": {
          "CloudWatchMetricsEnabled": true,
          "MetricName": "WebAcl",
          "SampledRequestsEnabled": true,
        },
      },
      "Type": "AWS::WAFv2::WebACL",
    },
    "MyTestStackwafMyTestStackwafWebAclLogging3BC79580": {
      "Properties": {
        "LogDestinationConfigs": [
          {
            "Fn::Select": [
              0,
              {
                "Fn::Split": [
                  ":*",
                  {
                    "Fn::GetAtt": [
                      "MyTestStackwafMyTestStackwafWafLogGroup95D52AAA",
                      "Arn",
                    ],
                  },
                ],
              },
            ],
          },
        ],
        "LoggingFilter": {
          "DefaultBehavior": "DROP",
          "Filters": [
            {
              "Behavior": "KEEP",
              "Conditions": [
                {
                  "ActionCondition": {
                    "Action": "BLOCK",
                  },
                },
                {
                  "ActionCondition": {
                    "Action": "COUNT",
                  },
                },
                {
                  "ActionCondition": {
                    "Action": "EXCLUDED_AS_COUNT",
                  },
                },
              ],
              "Requirement": "MEETS_ANY",
            },
          ],
        },
        "ResourceArn": {
          "Fn::GetAtt": [
            "MyTestStackwafMyTestStackwafWebAclB683AB5B",
            "Arn",
          ],
        },
      },
      "Type": "AWS::WAFv2::LoggingConfiguration",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
